name: Upload Release to Telegram

on:
  workflow_dispatch:
    inputs:
      tag_name:
        description: "Enter a release tag (leave empty to use latest)"
        required: false
        default: ""

jobs:
  telegram-upload:
    name: Send Release Assets to Telegram
    runs-on: ubuntu-latest

    permissions:
      contents: read

    steps:
      - name: Verify Telegram Bot Connection
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        run: |
          echo "Testing Telegram bot connection..."
          curl -s "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/getMe"

      - name: Get Release by Tag (if provided)
        if: ${{ github.event.inputs.tag_name != '' }}
        id: release_by_tag
        uses: octokit/request-action@v2.x
        with:
          route: GET /repos/${{ github.repository }}/releases/tags/${{ github.event.inputs.tag_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Get Latest Release (if no tag provided)
        if: ${{ github.event.inputs.tag_name == '' }}
        id: release_latest
        uses: octokit/request-action@v2.x
        with:
          route: GET /repos/${{ github.repository }}/releases/latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Set Release Output
        id: release_output
        run: |
          if [ "${{ github.event.inputs.tag_name }}" != "" ]; then
            echo "Using tag release"
            echo "::set-output name=data::${{ steps.release_by_tag.outputs.data }}"
          else
            echo "Using latest release"
            echo "::set-output name=data::${{ steps.release_latest.outputs.data }}"
          fi

      - name: Download and Send Assets to Telegram
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          echo "Fetching assets for release..."
          assets=$(echo '${{ steps.release_output.outputs.data }}' | jq -r '.assets[]?.browser_download_url')
          tag_name=$(echo '${{ steps.release_output.outputs.data }}' | jq -r '.tag_name')
          html_url=$(echo '${{ steps.release_output.outputs.data }}' | jq -r '.html_url')
          body=$(echo '${{ steps.release_output.outputs.data }}' | jq -r '.body' | sed 's/"/\\"/g' | sed 's/$/\\n/' )

          if [ -z "$assets" ]; then
            echo "‚ùå No assets found in the release."
            exit 0
          fi

          body_short=$(echo "$body" | head -c 3500)

          for url in $assets; do
            filename=$(basename "$url")
            echo "Downloading $filename..."
            curl -L -o "$filename" "$url"

            echo "Uploading $filename to Telegram..."
            caption="üì¶ *${{ github.repository }}*
            üîñ *Release:* ${tag_name}
            üîó [View on GitHub](${html_url})

            üìù *Changelog:*
            ${body_short}"

            curl -s -X POST "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendDocument" \
              -F chat_id="${TELEGRAM_CHAT_ID}" \
              -F document=@"$filename" \
              -F caption="$caption" \
              -F parse_mode="Markdown"
          done
