name: Upload Release to Telegram

on:
  workflow_dispatch:
    inputs:
      tag_name:
        description: "Enter a release tag (leave empty to use the latest)"
        required: false
        default: ""

jobs:
  telegram-upload:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Verify Telegram Bot Connection
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        run: |
          echo "Testing Telegram bot connection..."
          curl -s "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/getMe"

      - name: Get Release by Tag
        if: ${{ github.event.inputs.tag_name != '' }}
        id: release_by_tag
        uses: octokit/request-action@v2.x
        with:
          route: GET /repos/${{ github.repository }}/releases/tags/${{ github.event.inputs.tag_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Get Latest Release
        if: ${{ github.event.inputs.tag_name == '' }}
        id: release_latest
        uses: octokit/request-action@v2.x
        with:
          route: GET /repos/${{ github.repository }}/releases/latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Save Release JSON to File
        shell: bash
        run: |
          if [ "${{ github.event.inputs.tag_name }}" != "" ]; then
            echo '${{ steps.release_by_tag.outputs.data }}' > release.json
          else
            echo '${{ steps.release_latest.outputs.data }}' > release.json

      - name: Upload Each Asset to Telegram
        shell: bash
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          # Read release info
          tag_name=$(jq -r '.tag_name' release.json)
          html_url=$(jq -r '.html_url' release.json)
          body=$(jq -r '.body' release.json)

          # Get asset URLs
          mapfile -t assets < <(jq -r '.assets[]?.browser_download_url' release.json)

          if [ ${#assets[@]} -eq 0 ]; then
            echo "❌ No assets found in the release."
            exit 0
          fi

          # Loop through each asset
          for url in "${assets[@]}"; do
            filename=$(basename "$url")
            echo "Downloading $filename..."
            curl -L -o "$filename" "$url"

            echo "Uploading $filename to Telegram..."
            curl -s -X POST "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendDocument" \
              -F chat_id="${TELEGRAM_CHAT_ID}" \
              -F document=@"$filename" \
              -F caption="📦 *${{ github.repository }}*
              🔖 *Release:* ${tag_name}
              🔗 [View on GitHub](${html_url})

              📝 *Changelog:*
              $body" \
              -F parse_mode="Markdown"
          done
